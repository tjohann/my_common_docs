#
# some infos about void-package
#





###################################################################
#                                                                 #
#         CROSSBUILD for armv5te (arietta/imx233)                 #
#                                                                 #
###################################################################
To make it independed from your normal account i add a new user: build_user 

- below are the changes for .bashrc (to have some alias and emacs) 
- below are additions to conf (CCACHE, NUMJOBS ...)

# ----------------------------------------------------------------
#
# add user "build_user" to build all
#

useradd build_user
passwd build_user
usermod -a -G kvm,wheel build_user

# ----------------------------------------------------------------
#
# .bashrc for build_user
#

# .bashrc

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# Some alias
alias df="df -h"
alias du="du -h"
alias ls="ls --color=auto"
alias lf="ls -lah --color=auto"
alias more=less
alias cd..="cd .."
alias ping="ping -c3"
alias jobs="jobs -pl"
alias dmesg="dmesg --human"
alias vi="vim"

alias lf="ls -lahF --color=auto "
alias ls='ls --color=auto'

# emacs exports
#export EDITOR=~/bin/ee
export ALTERNATE_EDITOR=""
export EDITOR="emacsclient -t"                  # $EDITOR should open in terminal
export VISUAL="emacsclient -c -a emacs"         # $VISUAL opens in GUI with non-daemon as alternate

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

PS1='[\u@\h \W]\$ '

# Extend $PATH
export PATH=$HOME/bin:/sbin:/usr/sbin:/usr/local/sbin:$PATH


# ----------------------------------------------------------------
#
# clone void-packages and void-mklive
#

git clone git://github.com/voidlinux/void-packages.git
git clone git://github.com/voidlinux/void-mklive.git


# ----------------------------------------------------------
#
# etc/conf
#

# my addtions

XBPS_CCACHE=yes
XBPS_MAKEJOBS=8


# ----------------------------------------------------------
#
# build it
#

There're at least 3 different steps:
- first setup environment
- build base-system, arietta-base and ntp
- create rootfs based on the step above


#
# crossbuild env to build packages 
#
- working dir:
[build_user@barney void-packages]

-> first install the basic binarys to be able to crossbuild ...
   after that you're able to build packages for your host (x86_64 in my case),
   what is needed for the next step (bootstrap armv5te)
./xbps-src binary-bootstrap


-> build the basics for the rootfs ...
   after that you're able to build the base-system
./xbps-src -m masterdir-arietta -H hostdir-arietta bootstrap armv5te
   

#
# crossbuild env to build packages for rootfs 
#
- working dir:
[build_user@barney void-packages]

-> build base-system ...
   after that your're able to build the arietta specific base-system
./xbps-src -m masterdir-arietta -H hostdir-arietta -a armv5te -N pkg base-system


-> build arietta specific base system and dependencies
   after that you're able to build the rootfs 
./xbps-src -m masterdir-arietta -H hostdir-arietta -a armv5te -N pkg arietta-base
./xbps-src -m masterdir-arietta -H hostdir-arietta -a armv5te -N pkg ntp


#
# create rootfs for arietta
#
- working dir:
[build_user@barney void-mklive]

-> create the rootfs (void-mklive dir)
   after that you're able to build an image for usage with dd
sudo ./mkrootfs.sh -r ../void-packages/hostdir-arietta/binpkgs/ arietta

-> create an image of the rootfs
tbd.

##################################################################

# ----------------------------------------------------------------
#
# old stuff ... ignore
#

# howto crossbuild
./xbps-src binary-bootstrap
./xbps-src -a armv5te pkg base-chroot
